/*
 * This file is generated by jOOQ.
 */
package com.ef.generated.tables;


import com.ef.generated.Indexes;
import com.ef.generated.Keys;
import com.ef.generated.Logs;
import com.ef.generated.tables.records.ViolationsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Violations extends TableImpl<ViolationsRecord> {

    private static final long serialVersionUID = -1258580574;

    /**
     * The reference instance of <code>logs.violations</code>
     */
    public static final Violations VIOLATIONS = new Violations();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViolationsRecord> getRecordType() {
        return ViolationsRecord.class;
    }

    /**
     * The column <code>logs.violations.id</code>.
     */
    public final TableField<ViolationsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>logs.violations.ip</code>.
     */
    public final TableField<ViolationsRecord, String> IP = createField("ip", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>logs.violations.comment</code>.
     */
    public final TableField<ViolationsRecord, String> COMMENT = createField("comment", org.jooq.impl.SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * Create a <code>logs.violations</code> table reference
     */
    public Violations() {
        this(DSL.name("violations"), null);
    }

    /**
     * Create an aliased <code>logs.violations</code> table reference
     */
    public Violations(String alias) {
        this(DSL.name(alias), VIOLATIONS);
    }

    /**
     * Create an aliased <code>logs.violations</code> table reference
     */
    public Violations(Name alias) {
        this(alias, VIOLATIONS);
    }

    private Violations(Name alias, Table<ViolationsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Violations(Name alias, Table<ViolationsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Violations(Table<O> child, ForeignKey<O, ViolationsRecord> key) {
        super(child, key, VIOLATIONS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Logs.LOGS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.VIOLATIONS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ViolationsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_VIOLATIONS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ViolationsRecord> getPrimaryKey() {
        return Keys.KEY_VIOLATIONS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ViolationsRecord>> getKeys() {
        return Arrays.<UniqueKey<ViolationsRecord>>asList(Keys.KEY_VIOLATIONS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Violations as(String alias) {
        return new Violations(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Violations as(Name alias) {
        return new Violations(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Violations rename(String name) {
        return new Violations(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Violations rename(Name name) {
        return new Violations(name, null);
    }
}
